---
- name: D√©ployer une app React avec Docker + Nginx + Reverse Proxy multi-ports
  hosts: all  # Le filtrage se fera dynamiquement avec `-l`
  become: yes

  tasks:
    - name: V√©rifier que les variables obligatoires sont d√©finies
      assert:
        that:
          - react_repo_url is defined
          - container_name is defined
          - docker_image_name is defined
        fail_msg: "‚ùå Les variables react_repo_url, container_name et docker_image_name sont requises."

    - name: D√©finir le dossier de build √† partir du nom du conteneur
      set_fact:
        build_dir: "/opt/{{ container_name }}_build"

    - name: Enregistrer l'heure de d√©but (epoch)
      command: date +%s
      register: start_time_cmd

    - name: Installer Docker et Nginx
      apt:
        name: "{{ item }}"
        state: present
        update_cache: yes
      loop:
        - docker.io
        - nginx

    - name: Cr√©er le dossier de build
      file:
        path: "{{ build_dir }}"
        state: directory
        mode: "0755"

    - name: Cr√©er Dockerfile multi-stage
      copy:
        dest: "{{ build_dir }}/Dockerfile"
        content: |
          FROM node:18-alpine as builder
          WORKDIR /app
          RUN apk add --no-cache git
          RUN git clone {{ react_repo_url }} .
          RUN rm -rf build
          RUN yarn install && yarn build

          FROM nginx:alpine
          COPY --from=builder /app/build /usr/share/nginx/html
          COPY nginx.conf /etc/nginx/conf.d/default.conf
          EXPOSE 80
          CMD ["nginx", "-g", "daemon off;"]

    - name: Cr√©er fichier nginx.conf pour le container (serveur interne dans le conteneur)
      copy:
        dest: "{{ build_dir }}/nginx.conf"
        content: |
          server {
              listen 80;
              root /usr/share/nginx/html;
              index index.html;
              location / {
                  try_files $uri /index.html;
              }
          }

    - name: Supprimer conteneur et image Docker existants
      block:
        - name: Supprimer conteneur Docker s'il existe
          community.docker.docker_container:
            name: "{{ container_name }}"
            state: absent
            force_kill: true
          ignore_errors: true

        - name: Supprimer image Docker s'il existe
          community.docker.docker_image:
            name: "{{ docker_image_name }}"
            state: absent
            force_absent: true
          ignore_errors: true

    - name: Construire l‚Äôimage Docker sans cache
      community.docker.docker_image:
        name: "{{ docker_image_name }}"
        build:
          path: "{{ build_dir }}"
          nocache: true
          pull: true
        source: build

    - name: Supprimer les images Docker interm√©diaires <none> (dangling)
      shell: docker images -f "dangling=true" -q | xargs -r docker rmi
      args:
        executable: /bin/bash

    - name: Chercher un port libre √† partir de 801
      vars:
        start_port: 801
        max_port: 8100
      block:
        - name: G√©n√©rer une liste de ports candidats
          set_fact:
            candidate_ports: "{{ range(start_port, max_port) | list }}"

        - name: V√©rifier les ports un par un et choisir le premier libre
          shell: |
            for port in {{ candidate_ports | join(' ') }}; do
              ss -tuln | grep ":$port " > /dev/null || { echo $port; break; }
            done
          register: chosen_port
          changed_when: false

        - name: Enregistrer le port libre trouv√©
          set_fact:
            exposed_port: "{{ chosen_port.stdout | int }}"

    - name: D√©marrer le conteneur React sur le port libre trouv√©
      community.docker.docker_container:
        name: "{{ container_name }}"
        image: "{{ docker_image_name }}"
        state: started
        restart_policy: always
        published_ports:
          - "{{ exposed_port }}:80"

    - name: Configurer le reverse proxy Nginx pour ce projet sur le port {{ exposed_port }} dans la machine h√¥te
      block:
        - name: Copier la config proxy sp√©cifique au projet
          copy:
            dest: "/etc/nginx/sites-available/{{ container_name }}_proxy.conf"
            content: |
              server {
                  listen {{ exposed_port }};
                  server_name _;

                  location / {
                      proxy_pass http://localhost:{{ exposed_port }};
                      proxy_http_version 1.1;
                      proxy_set_header Upgrade $http_upgrade;
                      proxy_set_header Connection 'upgrade';
                      proxy_set_header Host $host;
                      proxy_cache_bypass $http_upgrade;
                  }
              }

        - name: Activer la config proxy du projet
          file:
            src: "/etc/nginx/sites-available/{{ container_name }}_proxy.conf"
            dest: "/etc/nginx/sites-enabled/{{ container_name }}_proxy.conf"
            state: link
            force: yes

    - name: Reload Nginx pour appliquer la nouvelle config
      service:
        name: nginx
        state: reloaded

    - name: Obtenir IP locale
      shell: hostname -I | awk '{print $1}'
      register: local_ip

    - name: Obtenir IP publique
      command: curl -s http://checkip.amazonaws.com
      register: public_ip

    - name: Enregistrer l'heure de fin (epoch)
      command: date +%s
      register: end_time_cmd

    - name: DEBUG start time
      debug:
        msg: "Start time: {{ start_time_cmd.stdout }}"

    - name: DEBUG end time
      debug:
        msg: "End time: {{ end_time_cmd.stdout }}"

    - name: V√©rifier que l'heure de d√©but et fin sont valides
      fail:
        msg: "Les horodatages sont invalides. Impossible de calculer la dur√©e."
      when: start_time_cmd.stdout | length == 0 or end_time_cmd.stdout | length == 0

    - name: Calculer la dur√©e brute (en secondes)
      set_fact:
        duration_seconds: "{{ end_time_cmd.stdout | int - start_time_cmd.stdout | int }}"

    - name: Calculer la dur√©e en minutes et secondes
      set_fact:
        duration_minutes: "{{ duration_seconds | int // 60 }}"
        duration_remaining_seconds: "{{ duration_seconds | int % 60 }}"

    - name: Afficher les infos de fin
      debug:
        msg: |
          ‚úÖ Application d√©ploy√©e avec succ√®s !
          üïì Temps total d'ex√©cution : {{ duration_minutes }} min {{ duration_remaining_seconds }} s
          üåê Acc√®s local  : http://{{ local_ip.stdout | trim }}:{{ exposed_port }}
