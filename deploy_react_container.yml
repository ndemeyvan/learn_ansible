---
- name: D√©ployer une app React dans un conteneur l√©ger avec Nginx + Reverse Proxy
  hosts: servers_1
  become: yes
  vars:
    react_repo_url: "https://github.com/ndemeyvan/ansible_react.git"
    container_name: "flexy_push"
    docker_image_name: "flexy_push"
    default_port: 80
    fallback_port: 8080
    build_dir: "/opt/fexy_build"

  tasks:
    - name: Installer Docker si n√©cessaire
      apt:
        name: docker.io
        state: present
        update_cache: yes
      when: ansible_facts.packages['docker.io'] is not defined

    - name: Installer Nginx si n√©cessaire
      apt:
        name: nginx
        state: present
        update_cache: yes
      when: ansible_facts.packages['nginx'] is not defined

    - name: Cr√©er le dossier de build
      file:
        path: "{{ build_dir }}"
        state: directory
        mode: "0755"

    - name: Cr√©er le Dockerfile multi-stage ultra l√©ger
      copy:
        dest: "{{ build_dir }}/Dockerfile"
        content: |
          # Build Stage
          FROM node:18-alpine as builder
          WORKDIR /app
          RUN apk add --no-cache git
          RUN git clone {{ react_repo_url }} .
          RUN yarn install && yarn build

          # Serve Stage
          FROM nginx:alpine
          COPY --from=builder /app/build /usr/share/nginx/html
          COPY nginx.conf /etc/nginx/conf.d/default.conf
          EXPOSE 80
          CMD ["nginx", "-g", "daemon off;"]

    - name: Cr√©er le fichier nginx.conf pour Nginx dans le conteneur
      copy:
        dest: "{{ build_dir }}/nginx.conf"
        content: |
          server {
              listen 80;
              root /usr/share/nginx/html;
              index index.html;
              location / {
                  try_files $uri /index.html;
              }
          }

    - name: Construire l‚Äôimage Docker
      community.docker.docker_image:
        name: "{{ docker_image_name }}"
        build:
          path: "{{ build_dir }}"
        source: build

    - name: V√©rifier si le port 80 est utilis√©
      shell: ss -tuln | grep ":80 "
      register: port_check
      ignore_errors: true

    - name: D√©terminer le port √† exposer
      set_fact:
        exposed_port: "{{ fallback_port if port_check.rc == 0 else default_port }}"

    - name: Supprimer l‚Äôancien conteneur s‚Äôil existe
      docker_container:
        name: "{{ container_name }}"
        state: absent
        force_kill: true

    - name: Lancer le conteneur Docker
      docker_container:
        name: "{{ container_name }}"
        image: "{{ docker_image_name }}"
        state: started
        restart_policy: always
        published_ports:
          - "{{ exposed_port }}:80"

    - name: Configurer le reverse proxy Nginx sur la machine h√¥te
      copy:
        dest: /etc/nginx/sites-available/fexy_proxy.conf
        content: |
          server {
              listen 80 default_server;
              server_name _;
              location / {
                  proxy_pass http://localhost:{{ exposed_port }};
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host $host;
                  proxy_cache_bypass $http_upgrade;
              }
          }

    - name: Activer la config proxy Nginx
      file:
        src: /etc/nginx/sites-available/fexy_proxy.conf
        dest: /etc/nginx/sites-enabled/fexy_proxy.conf
        state: link
        force: yes

    - name: Supprimer le site par d√©faut Nginx
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent
      ignore_errors: true

    - name: Obtenir l‚Äôadresse IP locale de la machine h√¥te
      shell: hostname -I | awk '{print $1}'
      register: local_ip

    - name: Red√©marrer Nginx sur la machine physique
      service:
        name: nginx
        state: restarted

    - name: Obtenir l‚Äôadresse IP publique
      command: curl -s http://checkip.amazonaws.com
      register: public_ip

    - name: Afficher le lien d‚Äôacc√®s
      debug:
        msg: |
          üåê Acc√®s local (LAN) :  http://{{ local_ip.stdout | trim }}:{{ exposed_port }}
