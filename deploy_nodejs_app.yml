---
- name: D√©ployer une app Node.js avec Docker + Nginx + Reverse Proxy multi-ports
  hosts: all # Le filtrage se fera dynamiquement avec `-l`
  become: yes

  vars_prompt:
    - name: "repo_url"
      prompt: "URL du d√©p√¥t Git"
      private: no
    - name: "container_name"
      prompt: "Nom du conteneur"
      private: no
    - name: "docker_image_name"
      prompt: "Nom de l'image Docker"
      private: no
    - name: "app_type"
      prompt: "Type d'application (react, vue, nestjs, express, nextjs, nuxt, svelte, angular)"
      private: no
    - name: "node_version"
      prompt: "The version of nodejs of the container default node:18-alpine"
      private: no

  tasks:
    - name: D√©finir le dossier de build √† partir du nom du conteneur
      set_fact:
        build_dir: "/opt/{{ container_name }}_build"

    - name: Enregistrer l'heure de d√©but (epoch)
      command: date +%s
      register: start_time_cmd

    - name: Installer Docker et Nginx
      apt:
        name: "{{ item }}"
        state: present
        update_cache: yes
      loop:
        - docker.io
        - nginx

    - name: Cr√©er le dossier de build
      file:
        path: "{{ build_dir }}"
        state: directory
        mode: "0755"

    - name: Cr√©er Dockerfile dynamique selon app_type
      copy:
        dest: "{{ build_dir }}/Dockerfile"
        content: |
          {% if app_type in ['vue'] %}
          FROM node:{{ node_version }} as builder
          WORKDIR /app
          RUN apk add --no-cache git
          RUN git clone --depth=1 {{ repo_url }} .
          RUN yarn install
          RUN yarn build

          FROM nginx:alpine
          COPY --from=builder /app/dist /usr/share/nginx/html
          EXPOSE 80
          CMD ["nginx", "-g", "daemon off;"]

          {% elif app_type in ['react'] %}
          FROM node:{{ node_version }} as builder
          WORKDIR /app
          RUN apk add --no-cache git
          RUN git clone --depth=1 {{ repo_url }} .
          RUN yarn install
          RUN yarn build

          FROM nginx:alpine
          COPY --from=builder /app/build /usr/share/nginx/html
          EXPOSE 80
          CMD ["nginx", "-g", "daemon off;"]

          {% elif app_type in ['angular'] %}

          FROM node:{{ node_version }} as builder
          # Set working directory
          WORKDIR /app
          # Install Git and clone the project
          RUN apk add --no-cache git
          RUN git clone --depth=1 {{ repo_url }} .
          # Install dependencies and Angular CLI
          RUN yarn install
          RUN yarn global add @angular/cli
          # Build the Angular project with correct output path
          RUN ng build --configuration production --output-path=dist/{{ docker_image_name }}

          # -------------------------
          # Production stage
          # -------------------------
          FROM nginx:alpine
          # Remove default Nginx static files
          RUN rm -rf /usr/share/nginx/html/*
          # Copy Angular files directly to html root (FIXED PATH)
          COPY --from=builder /app/dist/{{ docker_image_name }}/browser/. /usr/share/nginx/html/
          # Expose port
          EXPOSE 80
          # Run Nginx
          CMD ["nginx", "-g", "daemon off;"]

          {% elif app_type in ['nestjs'] %}
          FROM node:{{ node_version }}
          WORKDIR /app
          RUN apk add --no-cache git
          RUN git clone --depth=1 {{ repo_url }} .
          RUN yarn install
          RUN yarn build || true
          EXPOSE 3000
          CMD ["node", "dist/main.js"]

          {% elif app_type in ['express'] %}
          FROM node:{{ node_version }}
          WORKDIR /app
          RUN apk add --no-cache git
          RUN git clone --depth=1 {{ repo_url }} .
          RUN yarn install
          RUN yarn build || true
          EXPOSE 3000
          CMD ["node", "dist/index.js"]

          {% else %}
          FROM node:{{ node_version }}
          WORKDIR /app
          RUN apk add --no-cache git
          RUN git clone --depth=1 {{ repo_url }} .
          RUN yarn install
          RUN yarn build || true
          EXPOSE 3000
          CMD ["yarn", "start"]
          {% endif %}

    - name: Supprimer conteneur et image Docker existants
      block:
        - name: Supprimer conteneur Docker s'il existe
          community.docker.docker_container:
            name: "{{ container_name }}"
            state: absent
            force_kill: true
          ignore_errors: true

        - name: Supprimer image Docker s'il existe
          community.docker.docker_image:
            name: "{{ docker_image_name }}"
            state: absent
            force_absent: true
          ignore_errors: true

    - name: Construire l‚Äôimage Docker sans cache
      community.docker.docker_image:
        name: "{{ docker_image_name }}"
        build:
          path: "{{ build_dir }}"
          nocache: true
          pull: true
        source: build

    - name: Supprimer les images Docker interm√©diaires <none> (dangling)
      shell: docker images -f "dangling=true" -q | xargs -r docker rmi
      args:
        executable: /bin/bash

    - name: Chercher un port libre √† partir de 801
      vars:
        start_port: 801
        max_port: 8100
      block:
        - name: G√©n√©rer une liste de ports candidats
          set_fact:
            candidate_ports: "{{ range(start_port, max_port) | list }}"

        - name: V√©rifier les ports un par un et choisir le premier libre
          shell: |
            for port in {{ candidate_ports | join(' ') }}; do
              ss -tuln | grep ":$port " > /dev/null || { echo $port; break; }
            done
          register: chosen_port
          changed_when: false

        - name: Enregistrer le port libre trouv√©
          set_fact:
            exposed_port: "{{ chosen_port.stdout | int }}"

    - name: D√©marrer le conteneur sur le port libre trouv√©
      community.docker.docker_container:
        name: "{{ container_name }}"
        image: "{{ docker_image_name }}"
        state: started
        restart_policy: always
        published_ports:
          - "{{ exposed_port }}:{% if app_type in ['react', 'vue', 'angular', 'svelte'] %}80{% else %}3000{% endif %}"
        env:
          NODE_ENV: production

    - name: Configurer le reverse proxy Nginx
      block:
        - name: Copier la config proxy sp√©cifique au projet
          copy:
            dest: "/etc/nginx/sites-available/{{ container_name }}_proxy.conf"
            content: |
              server {
                  listen {{ exposed_port }};
                  server_name _;

                  location / {
                      proxy_pass http://localhost:{{ exposed_port }};
                      proxy_http_version 1.1;
                      proxy_set_header Upgrade $http_upgrade;
                      proxy_set_header Connection 'upgrade';
                      proxy_set_header Host $host;
                      proxy_cache_bypass $http_upgrade;
                  }
              }

        - name: Activer la config proxy du projet
          file:
            src: "/etc/nginx/sites-available/{{ container_name }}_proxy.conf"
            dest: "/etc/nginx/sites-enabled/{{ container_name }}_proxy.conf"
            state: link
            force: yes

    - name: Reload Nginx pour appliquer la nouvelle config
      service:
        name: nginx
        state: reloaded

    - name: Obtenir IP locale
      shell: hostname -I | awk '{print $1}'
      register: local_ip

    - name: Obtenir IP publique
      command: curl -s http://checkip.amazonaws.com
      register: public_ip

    - name: Enregistrer l'heure de fin (epoch)
      command: date +%s
      register: end_time_cmd

    - name: Calculer la dur√©e brute (en secondes)
      set_fact:
        duration_seconds: "{{ end_time_cmd.stdout | int - start_time_cmd.stdout | int }}"

    - name: Calculer la dur√©e en minutes et secondes
      set_fact:
        duration_minutes: "{{ duration_seconds | int // 60 }}"
        duration_remaining_seconds: "{{ duration_seconds | int % 60 }}"

    - name: Afficher les infos de fin
      debug:
        msg: |
          ‚úÖ Application d√©ploy√©e avec succ√®s !
          üïì Temps total d'ex√©cution : {{ duration_minutes }} min {{ duration_remaining_seconds }} s
          üåê Acc√®s local  : http://{{ local_ip.stdout | trim }}:{{ exposed_port }}
          üåç Acc√®s public : http://{{ public_ip.stdout | trim }}:{{ exposed_port }}
